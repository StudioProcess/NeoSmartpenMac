//
//  types.swift
//  PenTest
//
//  Created by Martin Leopold on 15.11.17.
//  Copyright Â© 2017 Process. All rights reserved.
//

import Foundation
import PenLib

struct StrokeNode: Codable {
    let x: Float
    let y: Float
    let pressure: Float
    let timeDiff: Int
    
    init(fromNJNode node: NJNode) {
        x = node.x
        y = node.y
        pressure = node.pressure
        timeDiff = Int(node.timeDiff)
    }
}

enum StrokeEventType: String, Codable {
    case updown, stroke
}

enum StrokeEventStatus: String, Codable {
    case down, up
}

struct StrokeEvent: Codable {
    var type: StrokeEventType
    var status: StrokeEventStatus?
    var time: Int?
    var color: Int?
    var node: StrokeNode?
    
    init(fromDict dict: [AnyHashable: Any]) {
        type = StrokeEventType(rawValue: dict["type"] as! String)!
        if (type == .updown) {
            status = StrokeEventStatus(rawValue: dict["status"] as! String)
            time = dict["time"] as? Int
            color = dict["color"] as? Int
        } else { // type == .stroke
            node = StrokeNode(fromNJNode: dict["node"] as! NJNode)
        }
    }
}

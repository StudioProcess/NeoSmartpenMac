//
//  main.swift
//  PenTest
//
//  Created by Martin Leopold on 10.11.17.
//  Copyright Â© 2017 Process. All rights reserved.
//

import Foundation
import PenLib

print("Hello, World!")

// setup run loop
var shouldKeepRunning = true
let runLoop = RunLoop.current

var pencomm = NJPenCommManager.sharedInstance()
pencomm?.handleNewPeripheral = nil;
//print("pen comm manager:", pencomm);
print("pen registered:", pencomm?.hasPenRegistered as Any)
print("pen connected: ", pencomm?.isPenConnected as Any)
//if (pencomm?.hasPenRegistered)! { pencomm?.resetPenRegistration() }
print("pen uuid: ", pencomm?.regUuid as Any) // works when connected
print("pen connect status", pencomm?.penConnectionStatus as Any)


class PasswordDelegate: NSObject, NJPenPasswordDelegate {
    func penPasswordRequest(_ data: UnsafeMutablePointer<PenPasswordRequestStruct>!) {
        print("HANDLE password:", data)
        pencomm?.setBTComparePassword("0000");
    }
}

class StatusDelegate: NSObject, NJPenStatusDelegate {
    func penStatusData(_ data: UnsafeMutablePointer<PenStateStruct>!) {
        print("HANDLE status:", data)
    }
}

class ParserStartDelegate: NSObject, NJPenCommParserStartDelegate {
    func activeNoteId(forFirstStroke noteId: Int32, pageNum pageNumber: Int32, sectionId section: Int32, ownderId owner: Int32) {
        print("HANDLE active note id (for first stroke)")
    }
    
    func setPenCommNoteIdList() {
        print("HANDLE pen comm note id list")
        pencomm?.setAllNoteIdList()
    }
}

class ParserStrokeHandler: NSObject, NJPenCommParserStrokeHandler {
    func processStroke(_ stroke: [AnyHashable : Any]!) {
        print("HANDLE process stroke")
    }
    
    func activeNoteId(_ noteId: Int32, pageNum pageNumber: Int32, sectionId section: Int32, ownderId owner: Int32) {
        print("HANDLE active note id")
    }
    
    func notifyPageChanging() {
        print("HANDLE page changing")
    }
    
    func notifyDataUpdating(_ updating: Bool) {
        print("HANDLE data updating")
    }
    
    func setPenColor() -> UInt32 {
        print("HANDLE set pen color")
        return 0;
    }
}

func penConnectionStatusChange(notification: Notification) {
    print("CONNECTION status change")
}

NotificationCenter.default.addObserver(
    forName: NSNotification.Name.NJPenCommManagerPenConnectionStatusChange,
    object: nil, queue: nil,
    using: penConnectionStatusChange)


let passwordDelegate = PasswordDelegate()
pencomm?.setPenPasswordDelegate( passwordDelegate )

let statusDelegate = StatusDelegate()
pencomm?.setPenStatusDelegate( statusDelegate )

let parserStartDelegate = ParserStartDelegate()
pencomm?.setPenCommParserStartDelegate( parserStartDelegate )

let parserStrokeHandler = ParserStrokeHandler()
pencomm?.setPenCommParserStrokeHandler( parserStrokeHandler )


pencomm?.btStart()


// start the run loop
while shouldKeepRunning == true &&
    runLoop.run(mode: RunLoopMode.defaultRunLoopMode, before: NSDate.distantFuture) {}


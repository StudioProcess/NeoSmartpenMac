//
//  main.swift
//  PenTest
//
//  Created by Martin Leopold on 10.11.17.
//  Copyright Â© 2017 Process. All rights reserved.
//

import Foundation
import PenLib

print("Hello, World!")

// setup run loop
var shouldKeepRunning = true
let runLoop = RunLoop.current


class PenHandler: NSObject, NJPenPasswordDelegate, NJPenStatusDelegate, NJPenCommParserStartDelegate, NJPenCommParserStrokeHandler {
    func activeNoteId(forFirstStroke noteId: Int32, pageNum pageNumber: Int32, sectionId section: Int32, ownderId owner: Int32) {
        print("HANDLE active note id (for first stroke)")
    }
    
    func processStroke(_ stroke: [AnyHashable : Any]!) {
        print("HANDLE process stroke")
    }
    
    func activeNoteId(_ noteId: Int32, pageNum pageNumber: Int32, sectionId section: Int32, ownderId owner: Int32) {
        print("HANDLE active note id")
    }
    
    func notifyPageChanging() {
        print("HANDLE page changing")
    }
    
    func setPenCommNoteIdList() {
        print("HANDLE pen comm note id list")
    }
    
    func penPasswordRequest(_ data: UnsafeMutablePointer<PenPasswordRequestStruct>!) {
        print("HANDLE password:", data)
        pencomm?.setBTComparePassword("0000");
    }
    
    func penStatusData(_ data: UnsafeMutablePointer<PenStateStruct>!) {
        print("HANDLE status:", data)
    }
    
    func penConnected(byOtherApp: Bool) {
        print("HANDLE pen connected by other app:", byOtherApp)
    }
}

var pencomm = NJPenCommManager.sharedInstance()
//print("pen comm manager:", pencomm);
print("pen registered:", pencomm?.hasPenRegistered)

var penhandler = PenHandler();
pencomm?.handleNewPeripheral = nil;
pencomm?.setPenPasswordDelegate(penhandler)
pencomm?.setPenStatusDelegate(penhandler)

pencomm?.setPenCommParserStrokeHandler(penhandler)

//pencomm?.setPenCommParserStartDelegate(penhandler)
//pencomm?.setPenCommParserCommandHandler(penhandler)

//if (pencomm?.hasPenRegistered)! { pencomm?.resetPenRegistration() }
pencomm?.btStart()


// start the run loop
while shouldKeepRunning == true &&
    runLoop.run(mode: RunLoopMode.defaultRunLoopMode, before: NSDate.distantFuture) {}

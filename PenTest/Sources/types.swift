//
//  types.swift
//  PenTest
//
//  Created by Martin Leopold on 15.11.17.
//  Copyright Â© 2017 Process. All rights reserved.
//

//import Foundation
import PenLib

struct StrokeNode: Codable {
    let x: Float
    let y: Float
    let pressure: Float
    let timeDiff: Int
    
    init(fromNJNode node: NJNode) {
        x = node.x
        y = node.y
        pressure = node.pressure
        timeDiff = Int(node.timeDiff)
    }
}

enum StrokeEventType: String, Codable {
    case updown, stroke
}

enum StrokeEventStatus: String, Codable {
    case down, up
}

struct StrokeEvent: Codable {
    var type: StrokeEventType
    var status: StrokeEventStatus?
    var time: Int?
    var color: Int?
    var node: StrokeNode?
    
    init(fromDict dict: [AnyHashable: Any]) {
        type = StrokeEventType(rawValue: dict["type"] as! String)!
        if (type == .updown) {
            status = StrokeEventStatus(rawValue: dict["status"] as! String)
            time = dict["time"] as? Int
            color = dict["color"] as? Int
        } else { // type == .stroke
            node = StrokeNode(fromNJNode: dict["node"] as! NJNode)
        }
    }
}

struct NoteIdEvent: Codable {
    let type = "activeNoteId"
    var noteId: Int32
    var pageNum: Int32
    var sectionId: Int32
    var ownerId: Int32
    
    init(noteId: Int32, pageNum: Int32, sectionId: Int32, ownerId: Int32) {
        self.noteId = noteId
        self.pageNum = pageNum
        self.sectionId = sectionId
        self.ownerId = ownerId
    }
}

struct PageChangingEvent: Codable {
    let type = "pageChanging"
}

struct ConnectionStatusEvent: Codable {
    let type = "connectionStatus"
    var info: Int
    var msg: String
    
    init(fromDict dict: [AnyHashable: Any]) {
        info = dict["info"] as! Int
        msg = dict["msg"] as! String
    }
}

struct PenStatusEvent: Codable {
    let type = "penStatus"
    let version: UInt8
    let penStatus: UInt8
    let timeZoneOffset: Int32
    let timeTick: UInt64
    let pressureMax: UInt8
    let battLevel: UInt8
    let memoryUsed: UInt8
    let colorState: UInt32
    let usePenTipOnOff: UInt8
    let useAccelerator: UInt8
    let useHover: UInt8
    let beepOnOff: UInt8
    let autoPwrOffTime: UInt16
    let penPressure: UInt16
    
    init(fromPenStateStruct s: PenStateStruct) {
        version = s.version
        penStatus = s.penStatus
        timeZoneOffset = s.timezoneOffset
        timeTick = s.timeTick
        pressureMax = s.pressureMax
        battLevel = s.battLevel
        memoryUsed = s.memoryUsed
        colorState = s.colorState
        usePenTipOnOff = s.usePenTipOnOff
        useAccelerator = s.useAccelerator
        useHover = s.useHover
        beepOnOff = s.beepOnOff
        autoPwrOffTime = s.autoPwrOffTime
        penPressure = s.penPressure
    }
}
